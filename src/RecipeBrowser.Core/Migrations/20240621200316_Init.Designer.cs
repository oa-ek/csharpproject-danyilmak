// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RecipeBrowser.Core.Context;

#nullable disable

namespace RecipeBrowser.Core.Migrations
{
    [DbContext(typeof(ProjectContext))]
    [Migration("20240621200316_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("IngredientRecipe", b =>
                {
                    b.Property<Guid>("IngredientsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RecipesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IngredientsId", "RecipesId");

                    b.HasIndex("RecipesId");

                    b.ToTable("IngredientRecipe");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("0fab1bbb-1a68-42b1-8c19-a8afb2bb82f7"),
                            ConcurrencyStamp = "0fab1bbb-1a68-42b1-8c19-a8afb2bb82f7",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("24145a30-2ae3-403c-b8ad-9e8a77cef681"),
                            ConcurrencyStamp = "24145a30-2ae3-403c-b8ad-9e8a77cef681",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("849daba3-4df2-463f-a569-40ff9b153eab"),
                            RoleId = new Guid("0fab1bbb-1a68-42b1-8c19-a8afb2bb82f7")
                        },
                        new
                        {
                            UserId = new Guid("27c9b183-5bf7-4994-b6e1-316200a5be15"),
                            RoleId = new Guid("24145a30-2ae3-403c-b8ad-9e8a77cef681")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RecipeBrowser.Core.Entities.CookingDifficulty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CookingDifficulties");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f164daed-eb51-41af-9be2-97c6cbe303e8"),
                            Title = "Легко"
                        },
                        new
                        {
                            Id = new Guid("b3df4de4-e14b-4c6a-9f43-ca9b7049546f"),
                            Title = "Нормально"
                        },
                        new
                        {
                            Id = new Guid("4e798cb2-0525-481f-bc99-7879697ae4e6"),
                            Title = "Важко"
                        });
                });

            modelBuilder.Entity("RecipeBrowser.Core.Entities.CookingType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CookingTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d339528f-48e6-4fed-b27d-ea8c44662da7"),
                            Title = "Стави в мікрохвильовці"
                        },
                        new
                        {
                            Id = new Guid("9b6d41d1-63c2-47ed-aaf2-273cbcf3b24b"),
                            Title = "Страви для грилю, барбекю, мангалу"
                        },
                        new
                        {
                            Id = new Guid("545688a7-b95a-489b-aba3-327dcb666a98"),
                            Title = "Страви в мультиварці"
                        },
                        new
                        {
                            Id = new Guid("31ca0b8e-aa19-4ac3-a71a-8c35fce947fa"),
                            Title = "Страви без спеціальних пристосувань"
                        },
                        new
                        {
                            Id = new Guid("cffae68f-1d50-4f82-8c7f-848832e22b7c"),
                            Title = "Страви на плиті"
                        },
                        new
                        {
                            Id = new Guid("04bad01c-fe40-429c-9273-8c2e40748d41"),
                            Title = "Страви в духовці"
                        },
                        new
                        {
                            Id = new Guid("4b38af40-2aac-410e-ac40-e0b9ffd9d7c5"),
                            Title = "Страви в пароварці"
                        });
                });

            modelBuilder.Entity("RecipeBrowser.Core.Entities.Ingredient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Amount")
                        .HasColumnType("real");

                    b.Property<Guid>("MeasureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MeasureId");

                    b.HasIndex("ProductId");

                    b.ToTable("Ingredients");
                });

            modelBuilder.Entity("RecipeBrowser.Core.Entities.Measure", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Measures");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b7232647-f78b-4d98-a12a-c37d6ebef199"),
                            Title = "гр."
                        },
                        new
                        {
                            Id = new Guid("39001dbc-9bbe-4514-ab30-89d2d553dcf8"),
                            Title = "кг."
                        },
                        new
                        {
                            Id = new Guid("c71cfd22-ad07-4053-8191-796a29fc129d"),
                            Title = "л."
                        },
                        new
                        {
                            Id = new Guid("bd10f730-51ae-4ada-aa56-4ef53bef873d"),
                            Title = "мл."
                        },
                        new
                        {
                            Id = new Guid("533dacc7-25c0-463a-a163-23625942273f"),
                            Title = "стол. л."
                        },
                        new
                        {
                            Id = new Guid("84437f08-1b7a-4822-90e1-debe10c0ec5d"),
                            Title = "чай. л."
                        },
                        new
                        {
                            Id = new Guid("9aeb1547-b29b-455b-92a8-a3fd0c48329a"),
                            Title = "штуки"
                        });
                });

            modelBuilder.Entity("RecipeBrowser.Core.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8cc83a55-f0d2-47af-b9a0-0eeac6274593"),
                            Title = "Яблуко",
                            TypeId = new Guid("547aba09-7f60-4a37-928b-d8e798e89810")
                        },
                        new
                        {
                            Id = new Guid("1f9d264c-2b3f-45b5-aed3-01819a58dd42"),
                            Title = "Банан",
                            TypeId = new Guid("547aba09-7f60-4a37-928b-d8e798e89810")
                        },
                        new
                        {
                            Id = new Guid("f3c2427a-4bfc-4736-903c-e830e0cd6841"),
                            Title = "Апельсин",
                            TypeId = new Guid("547aba09-7f60-4a37-928b-d8e798e89810")
                        },
                        new
                        {
                            Id = new Guid("b103f6e9-219c-4031-8405-506e0ced9b35"),
                            Title = "Помідор",
                            TypeId = new Guid("800e323a-9c7d-44db-9eb7-df5961eeda03")
                        },
                        new
                        {
                            Id = new Guid("89a84382-7efd-4718-adc5-bd5a0f1b2ca2"),
                            Title = "Морква",
                            TypeId = new Guid("800e323a-9c7d-44db-9eb7-df5961eeda03")
                        },
                        new
                        {
                            Id = new Guid("b397c686-e9c3-406b-b8ed-5c7f2922570d"),
                            Title = "Картопля",
                            TypeId = new Guid("800e323a-9c7d-44db-9eb7-df5961eeda03")
                        },
                        new
                        {
                            Id = new Guid("5976e4c3-80ce-4c77-9c72-dc20a4c859e1"),
                            Title = "Куряча грудка",
                            TypeId = new Guid("1eec1638-caf1-4649-95b0-4431685cc83c")
                        },
                        new
                        {
                            Id = new Guid("55626a02-ca0f-4a81-bfae-ea2899411463"),
                            Title = "Свинина",
                            TypeId = new Guid("1eec1638-caf1-4649-95b0-4431685cc83c")
                        },
                        new
                        {
                            Id = new Guid("9e95e656-cb87-4ffe-9b50-c9940f58d78c"),
                            Title = "Яловичина",
                            TypeId = new Guid("1eec1638-caf1-4649-95b0-4431685cc83c")
                        },
                        new
                        {
                            Id = new Guid("01410476-a431-4ff8-8184-d95f2a371bb6"),
                            Title = "Філе лосося",
                            TypeId = new Guid("5b7cbc8e-649b-4752-9140-db0f87d88d3e")
                        },
                        new
                        {
                            Id = new Guid("2e7829e2-0532-4050-b508-f73429f7711d"),
                            Title = "Креветки",
                            TypeId = new Guid("5b7cbc8e-649b-4752-9140-db0f87d88d3e")
                        },
                        new
                        {
                            Id = new Guid("9f18c098-214b-4501-80f0-ab271ad13e3f"),
                            Title = "Тунець",
                            TypeId = new Guid("5b7cbc8e-649b-4752-9140-db0f87d88d3e")
                        },
                        new
                        {
                            Id = new Guid("692f0450-3212-427a-a7d3-8ca9cb8330bc"),
                            Title = "Сіль",
                            TypeId = new Guid("bad4a9ee-9d2c-4f6c-92e2-c86aecee7f8a")
                        },
                        new
                        {
                            Id = new Guid("6e500bb5-2fd9-4a3c-a1e7-1ff2c86648ec"),
                            Title = "Чорний перець",
                            TypeId = new Guid("bad4a9ee-9d2c-4f6c-92e2-c86aecee7f8a")
                        },
                        new
                        {
                            Id = new Guid("72995674-8eca-45d5-ac25-7c757653f3d6"),
                            Title = "Паприка",
                            TypeId = new Guid("bad4a9ee-9d2c-4f6c-92e2-c86aecee7f8a")
                        },
                        new
                        {
                            Id = new Guid("aa64f4d3-32ad-46e7-b28a-2c7a524dec40"),
                            Title = "Оливкова олія",
                            TypeId = new Guid("cdc837a0-06d7-4a7f-ba86-a539565892ba")
                        },
                        new
                        {
                            Id = new Guid("7176ffb5-d43f-4886-a715-f31fb9bfb28f"),
                            Title = "Масло",
                            TypeId = new Guid("cdc837a0-06d7-4a7f-ba86-a539565892ba")
                        },
                        new
                        {
                            Id = new Guid("3101037d-5593-42c6-b57a-7933c8b5af27"),
                            Title = "Молоко",
                            TypeId = new Guid("cdc837a0-06d7-4a7f-ba86-a539565892ba")
                        },
                        new
                        {
                            Id = new Guid("4655e502-06f3-496d-b8c3-598a7f0c4d3f"),
                            Title = "Яйця",
                            TypeId = new Guid("cdc837a0-06d7-4a7f-ba86-a539565892ba")
                        },
                        new
                        {
                            Id = new Guid("532a8663-0912-4dc7-b8b6-e8215c0a4a48"),
                            Title = "Борошно",
                            TypeId = new Guid("cdc837a0-06d7-4a7f-ba86-a539565892ba")
                        },
                        new
                        {
                            Id = new Guid("e4e613dd-6203-4ce0-91f6-b31c34ec7112"),
                            Title = "Цибуля",
                            TypeId = new Guid("800e323a-9c7d-44db-9eb7-df5961eeda03")
                        },
                        new
                        {
                            Id = new Guid("8cad01bc-7154-4cc1-9e49-f8ed41c36977"),
                            Title = "Часник",
                            TypeId = new Guid("800e323a-9c7d-44db-9eb7-df5961eeda03")
                        },
                        new
                        {
                            Id = new Guid("55c3cd9b-b895-4b2a-9050-96f6e471829e"),
                            Title = "Огірок",
                            TypeId = new Guid("800e323a-9c7d-44db-9eb7-df5961eeda03")
                        },
                        new
                        {
                            Id = new Guid("8c717611-5097-4d55-b191-c73373278261"),
                            Title = "Сир",
                            TypeId = new Guid("cdc837a0-06d7-4a7f-ba86-a539565892ba")
                        },
                        new
                        {
                            Id = new Guid("ecd43716-77f6-4274-b1de-f57a46b65b48"),
                            Title = "Хліб",
                            TypeId = new Guid("cdc837a0-06d7-4a7f-ba86-a539565892ba")
                        },
                        new
                        {
                            Id = new Guid("afd3dc62-0de8-4ad4-86cd-10edbd8cbb2c"),
                            Title = "Цукор",
                            TypeId = new Guid("cdc837a0-06d7-4a7f-ba86-a539565892ba")
                        },
                        new
                        {
                            Id = new Guid("3dbd9d2f-92c6-4d57-9297-1c3fcd4d3e8b"),
                            Title = "Бекон",
                            TypeId = new Guid("1eec1638-caf1-4649-95b0-4431685cc83c")
                        },
                        new
                        {
                            Id = new Guid("ab473080-72c4-4d8c-b8f2-a094c75f523e"),
                            Title = "Сметана",
                            TypeId = new Guid("cdc837a0-06d7-4a7f-ba86-a539565892ba")
                        },
                        new
                        {
                            Id = new Guid("d47b497b-c5bb-4493-917f-f4455d4caa76"),
                            Title = "Гриби",
                            TypeId = new Guid("800e323a-9c7d-44db-9eb7-df5961eeda03")
                        });
                });

            modelBuilder.Entity("RecipeBrowser.Core.Entities.ProductType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProductTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("547aba09-7f60-4a37-928b-d8e798e89810"),
                            Title = "Фрукти"
                        },
                        new
                        {
                            Id = new Guid("800e323a-9c7d-44db-9eb7-df5961eeda03"),
                            Title = "Овочі"
                        },
                        new
                        {
                            Id = new Guid("1eec1638-caf1-4649-95b0-4431685cc83c"),
                            Title = "М'ясо"
                        },
                        new
                        {
                            Id = new Guid("5b7cbc8e-649b-4752-9140-db0f87d88d3e"),
                            Title = "Морепродукти"
                        },
                        new
                        {
                            Id = new Guid("bad4a9ee-9d2c-4f6c-92e2-c86aecee7f8a"),
                            Title = "Спеції"
                        },
                        new
                        {
                            Id = new Guid("cdc837a0-06d7-4a7f-ba86-a539565892ba"),
                            Title = "Інше"
                        });
                });

            modelBuilder.Entity("RecipeBrowser.Core.Entities.Recipe", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CookDuration")
                        .HasColumnType("int");

                    b.Property<Guid>("DifficultyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DifficultyId");

                    b.HasIndex("TypeId");

                    b.ToTable("Recipes");
                });

            modelBuilder.Entity("RecipeBrowser.Core.Entities.RecipeCollection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RecipesCollections");
                });

            modelBuilder.Entity("RecipeBrowser.Core.Entities.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<Guid>("RecipeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RecipeId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("RecipeBrowser.Core.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("849daba3-4df2-463f-a569-40ff9b153eab"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "05e36589-d08c-492f-b843-ce597dc88687",
                            Email = "admin@recipes.daniil.page",
                            EmailConfirmed = true,
                            FullName = "Даниїл Максимчук",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@RECIPES.DANIIL.PAGE",
                            NormalizedUserName = "ADMIN@RECIPES.DANIIL.PAGE",
                            PasswordHash = "AQAAAAIAAYagAAAAEM8AIIDBDkkMfRCv5ZVr5Nbuw50Qnz7rh3fEz0zwuCyx/ximg08pTMgH8kwtqjbBYQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "79a8de0b-461d-4f83-940d-117810bde414",
                            TwoFactorEnabled = false,
                            UserName = "admin@recipes.daniil.page"
                        },
                        new
                        {
                            Id = new Guid("27c9b183-5bf7-4994-b6e1-316200a5be15"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b09886d0-fda3-4faf-8212-a6269a273094",
                            Email = "user@recipes.daniil.page",
                            EmailConfirmed = true,
                            FullName = "Ігор Куренко",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@RECIPES.DANIIL.PAGE",
                            NormalizedUserName = "USER@RECIPES.DANIIL.PAGE",
                            PasswordHash = "AQAAAAIAAYagAAAAEJGdrLDGUD2Q6sakOx4jukNIUCIzWySXu+MZP4IN+z0oSmABI8bWsiTNdraj4DWjWA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "de5c715f-4728-4861-b63a-7be07e4e7be8",
                            TwoFactorEnabled = false,
                            UserName = "user@recipes.daniil.page"
                        });
                });

            modelBuilder.Entity("RecipeRecipeCollection", b =>
                {
                    b.Property<Guid>("RecipeCollectionsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RecipesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RecipeCollectionsId", "RecipesId");

                    b.HasIndex("RecipesId");

                    b.ToTable("RecipeRecipeCollection");
                });

            modelBuilder.Entity("IngredientRecipe", b =>
                {
                    b.HasOne("RecipeBrowser.Core.Entities.Ingredient", null)
                        .WithMany()
                        .HasForeignKey("IngredientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RecipeBrowser.Core.Entities.Recipe", null)
                        .WithMany()
                        .HasForeignKey("RecipesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("RecipeBrowser.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("RecipeBrowser.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RecipeBrowser.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("RecipeBrowser.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RecipeBrowser.Core.Entities.Ingredient", b =>
                {
                    b.HasOne("RecipeBrowser.Core.Entities.Measure", "Measure")
                        .WithMany("Ingredients")
                        .HasForeignKey("MeasureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RecipeBrowser.Core.Entities.Product", "Product")
                        .WithMany("Ingredients")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Measure");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("RecipeBrowser.Core.Entities.Product", b =>
                {
                    b.HasOne("RecipeBrowser.Core.Entities.ProductType", "Type")
                        .WithMany("Products")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Type");
                });

            modelBuilder.Entity("RecipeBrowser.Core.Entities.Recipe", b =>
                {
                    b.HasOne("RecipeBrowser.Core.Entities.CookingDifficulty", "Difficulty")
                        .WithMany("Recipes")
                        .HasForeignKey("DifficultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RecipeBrowser.Core.Entities.CookingType", "Type")
                        .WithMany("Recipes")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Difficulty");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("RecipeBrowser.Core.Entities.RecipeCollection", b =>
                {
                    b.HasOne("RecipeBrowser.Core.Entities.User", "User")
                        .WithMany("RecipeCollecitons")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("RecipeBrowser.Core.Entities.Review", b =>
                {
                    b.HasOne("RecipeBrowser.Core.Entities.Recipe", "Recipe")
                        .WithMany("Reviews")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RecipeBrowser.Core.Entities.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recipe");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RecipeRecipeCollection", b =>
                {
                    b.HasOne("RecipeBrowser.Core.Entities.RecipeCollection", null)
                        .WithMany()
                        .HasForeignKey("RecipeCollectionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RecipeBrowser.Core.Entities.Recipe", null)
                        .WithMany()
                        .HasForeignKey("RecipesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RecipeBrowser.Core.Entities.CookingDifficulty", b =>
                {
                    b.Navigation("Recipes");
                });

            modelBuilder.Entity("RecipeBrowser.Core.Entities.CookingType", b =>
                {
                    b.Navigation("Recipes");
                });

            modelBuilder.Entity("RecipeBrowser.Core.Entities.Measure", b =>
                {
                    b.Navigation("Ingredients");
                });

            modelBuilder.Entity("RecipeBrowser.Core.Entities.Product", b =>
                {
                    b.Navigation("Ingredients");
                });

            modelBuilder.Entity("RecipeBrowser.Core.Entities.ProductType", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("RecipeBrowser.Core.Entities.Recipe", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("RecipeBrowser.Core.Entities.User", b =>
                {
                    b.Navigation("RecipeCollecitons");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
