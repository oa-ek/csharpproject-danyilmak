// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RecipeBrowser.Core.Context;

#nullable disable

namespace RecipeBrowser.Core.Migrations
{
    [DbContext(typeof(ProjectContext))]
    [Migration("20240624072948_ReviewCreationTimeAdded")]
    partial class ReviewCreationTimeAdded
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("IngredientRecipe", b =>
                {
                    b.Property<Guid>("IngredientsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RecipesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IngredientsId", "RecipesId");

                    b.HasIndex("RecipesId");

                    b.ToTable("IngredientRecipe");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("623f61af-bd67-4919-a68c-1d9767b6240c"),
                            ConcurrencyStamp = "623f61af-bd67-4919-a68c-1d9767b6240c",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("110d30cc-bf56-45d5-ba19-43dacb3bd2a1"),
                            ConcurrencyStamp = "110d30cc-bf56-45d5-ba19-43dacb3bd2a1",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("bbef0523-79d8-43de-93ce-9d7fa17eab24"),
                            RoleId = new Guid("623f61af-bd67-4919-a68c-1d9767b6240c")
                        },
                        new
                        {
                            UserId = new Guid("6835ee35-29a5-49e5-a415-d831d4d0527b"),
                            RoleId = new Guid("110d30cc-bf56-45d5-ba19-43dacb3bd2a1")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RecipeBrowser.Core.Entities.CookingDifficulty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CookingDifficulties");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cb26a8ee-baba-4fb9-aade-9b179806bdec"),
                            Title = "Легко"
                        },
                        new
                        {
                            Id = new Guid("444e2944-c6b2-4b6f-8c4b-fbd079937330"),
                            Title = "Нормально"
                        },
                        new
                        {
                            Id = new Guid("fac35fcb-c87f-4731-898e-94b81aa4fce2"),
                            Title = "Важко"
                        });
                });

            modelBuilder.Entity("RecipeBrowser.Core.Entities.CookingType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CookingTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("efe57c2c-e94c-4565-b539-1fab4bb67508"),
                            Title = "Стави в мікрохвильовці"
                        },
                        new
                        {
                            Id = new Guid("1d8ec8eb-36e8-43fc-bf43-0d5dd01581fa"),
                            Title = "Страви для грилю, барбекю, мангалу"
                        },
                        new
                        {
                            Id = new Guid("e873d19f-ce8a-4d49-83e3-3eebef17cf95"),
                            Title = "Страви в мультиварці"
                        },
                        new
                        {
                            Id = new Guid("494decc9-a8e7-4f55-8e08-4d90a1bd07a2"),
                            Title = "Страви без спеціальних пристосувань"
                        },
                        new
                        {
                            Id = new Guid("691d886c-a2ad-4fbc-be4c-f12e61ae42e0"),
                            Title = "Страви на плиті"
                        },
                        new
                        {
                            Id = new Guid("92082199-692f-40f8-9669-5d456ae39e4e"),
                            Title = "Страви в духовці"
                        },
                        new
                        {
                            Id = new Guid("c4e06803-f6fc-4ea1-bdd8-88819b2e934f"),
                            Title = "Страви в пароварці"
                        });
                });

            modelBuilder.Entity("RecipeBrowser.Core.Entities.Ingredient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Amount")
                        .HasColumnType("real");

                    b.Property<Guid>("MeasureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MeasureId");

                    b.HasIndex("ProductId");

                    b.ToTable("Ingredients");
                });

            modelBuilder.Entity("RecipeBrowser.Core.Entities.Measure", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Measures");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b637997c-b85c-49d3-b5a3-8f60d374e7f9"),
                            Title = "гр."
                        },
                        new
                        {
                            Id = new Guid("3f848fec-c9da-4559-84b8-44c9ea92d070"),
                            Title = "кг."
                        },
                        new
                        {
                            Id = new Guid("452222dc-9c87-4b53-886b-e82ced0618a2"),
                            Title = "л."
                        },
                        new
                        {
                            Id = new Guid("569edbbb-23f6-45d1-97a6-165fc7b493bb"),
                            Title = "мл."
                        },
                        new
                        {
                            Id = new Guid("0f748b90-dd48-4572-88a3-db80f06a2513"),
                            Title = "стол. л."
                        },
                        new
                        {
                            Id = new Guid("c30307e8-fa08-4f3b-a3f7-59819697165a"),
                            Title = "чай. л."
                        },
                        new
                        {
                            Id = new Guid("f30ef26f-54b9-4ffb-a61d-bd37f7ebaa4e"),
                            Title = "штуки"
                        });
                });

            modelBuilder.Entity("RecipeBrowser.Core.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ae5cfe66-fd5e-4bba-941c-98e90c874fc8"),
                            Title = "Яблуко",
                            TypeId = new Guid("86d72acc-54cd-4ba8-9fd9-e80dbc786569")
                        },
                        new
                        {
                            Id = new Guid("04287e8c-944c-4da8-b893-91c010047f65"),
                            Title = "Банан",
                            TypeId = new Guid("86d72acc-54cd-4ba8-9fd9-e80dbc786569")
                        },
                        new
                        {
                            Id = new Guid("aabfe882-16ef-4bb6-b5ce-6c8001f3b4a7"),
                            Title = "Апельсин",
                            TypeId = new Guid("86d72acc-54cd-4ba8-9fd9-e80dbc786569")
                        },
                        new
                        {
                            Id = new Guid("cf296ccd-5cf0-4a65-bda3-3d1d213d918f"),
                            Title = "Помідор",
                            TypeId = new Guid("73e77e8f-7f1d-494f-8292-bb74082dcc30")
                        },
                        new
                        {
                            Id = new Guid("68da4f14-e357-4082-9b5f-2e525b92ba10"),
                            Title = "Морква",
                            TypeId = new Guid("73e77e8f-7f1d-494f-8292-bb74082dcc30")
                        },
                        new
                        {
                            Id = new Guid("b6d0820a-00b3-41d8-a7e9-49c4ffc8fd9b"),
                            Title = "Картопля",
                            TypeId = new Guid("73e77e8f-7f1d-494f-8292-bb74082dcc30")
                        },
                        new
                        {
                            Id = new Guid("30aa79c0-00a9-4d0d-9bb8-e68b02ac86d9"),
                            Title = "Куряча грудка",
                            TypeId = new Guid("b7c53f4f-6631-47cb-a893-e64bcd69be86")
                        },
                        new
                        {
                            Id = new Guid("7e0a9332-eab8-4fbd-bf64-68b2c165d18b"),
                            Title = "Свинина",
                            TypeId = new Guid("b7c53f4f-6631-47cb-a893-e64bcd69be86")
                        },
                        new
                        {
                            Id = new Guid("3db5687b-604b-4a85-bcee-5b9adc8faa36"),
                            Title = "Яловичина",
                            TypeId = new Guid("b7c53f4f-6631-47cb-a893-e64bcd69be86")
                        },
                        new
                        {
                            Id = new Guid("0371d725-5ce4-453a-bbbc-559a7430d43b"),
                            Title = "Філе лосося",
                            TypeId = new Guid("dc1688ad-b521-4cec-9b07-1297e41187c4")
                        },
                        new
                        {
                            Id = new Guid("ce885eef-a941-4dbd-a919-9f028718cb39"),
                            Title = "Креветки",
                            TypeId = new Guid("dc1688ad-b521-4cec-9b07-1297e41187c4")
                        },
                        new
                        {
                            Id = new Guid("b80ceafd-306a-414d-8661-a7d0d99565fe"),
                            Title = "Тунець",
                            TypeId = new Guid("dc1688ad-b521-4cec-9b07-1297e41187c4")
                        },
                        new
                        {
                            Id = new Guid("3a934cd2-4887-4ce6-bfad-2b30d6705b05"),
                            Title = "Сіль",
                            TypeId = new Guid("e20526a2-c082-4e60-a9b6-7a70656baa85")
                        },
                        new
                        {
                            Id = new Guid("d22cfba8-7218-4767-bc76-631246930276"),
                            Title = "Чорний перець",
                            TypeId = new Guid("e20526a2-c082-4e60-a9b6-7a70656baa85")
                        },
                        new
                        {
                            Id = new Guid("bdb43988-6b88-4b36-a479-d2254c0c9496"),
                            Title = "Паприка",
                            TypeId = new Guid("e20526a2-c082-4e60-a9b6-7a70656baa85")
                        },
                        new
                        {
                            Id = new Guid("82abc5dd-8605-4b6c-9d06-f668d9cff4b4"),
                            Title = "Оливкова олія",
                            TypeId = new Guid("81b63261-4744-4239-b4ab-c2dcea9ccd9a")
                        },
                        new
                        {
                            Id = new Guid("9b762447-3238-4c3f-b47c-bf3c84efaada"),
                            Title = "Масло",
                            TypeId = new Guid("81b63261-4744-4239-b4ab-c2dcea9ccd9a")
                        },
                        new
                        {
                            Id = new Guid("94c79acf-4e1a-4390-8dd8-1fca06123143"),
                            Title = "Молоко",
                            TypeId = new Guid("81b63261-4744-4239-b4ab-c2dcea9ccd9a")
                        },
                        new
                        {
                            Id = new Guid("6367628a-8669-4bad-81c1-9924bddb529e"),
                            Title = "Яйця",
                            TypeId = new Guid("81b63261-4744-4239-b4ab-c2dcea9ccd9a")
                        },
                        new
                        {
                            Id = new Guid("a9314b79-e87e-4864-a612-24c611c27266"),
                            Title = "Борошно",
                            TypeId = new Guid("81b63261-4744-4239-b4ab-c2dcea9ccd9a")
                        },
                        new
                        {
                            Id = new Guid("e4d9e095-c68f-4928-b1fe-cb129db3aaf6"),
                            Title = "Цибуля",
                            TypeId = new Guid("73e77e8f-7f1d-494f-8292-bb74082dcc30")
                        },
                        new
                        {
                            Id = new Guid("ad6c0c47-d4cb-41f5-98eb-924ffc434588"),
                            Title = "Часник",
                            TypeId = new Guid("73e77e8f-7f1d-494f-8292-bb74082dcc30")
                        },
                        new
                        {
                            Id = new Guid("a1ef3804-0794-4645-aab6-c220e96b46c9"),
                            Title = "Огірок",
                            TypeId = new Guid("73e77e8f-7f1d-494f-8292-bb74082dcc30")
                        },
                        new
                        {
                            Id = new Guid("be880ac6-cfe0-4c3a-b908-262e5d33bf11"),
                            Title = "Сир",
                            TypeId = new Guid("81b63261-4744-4239-b4ab-c2dcea9ccd9a")
                        },
                        new
                        {
                            Id = new Guid("c8e69003-777d-41d4-9496-7707587281cc"),
                            Title = "Хліб",
                            TypeId = new Guid("81b63261-4744-4239-b4ab-c2dcea9ccd9a")
                        },
                        new
                        {
                            Id = new Guid("141a8f99-819d-45c3-a83a-5d29b85e2b7c"),
                            Title = "Цукор",
                            TypeId = new Guid("81b63261-4744-4239-b4ab-c2dcea9ccd9a")
                        },
                        new
                        {
                            Id = new Guid("13b32de4-308b-4f3b-8c40-99bb70ce51d1"),
                            Title = "Бекон",
                            TypeId = new Guid("b7c53f4f-6631-47cb-a893-e64bcd69be86")
                        },
                        new
                        {
                            Id = new Guid("8c1ddcb5-f22e-4d67-a059-fd294733beb7"),
                            Title = "Сметана",
                            TypeId = new Guid("81b63261-4744-4239-b4ab-c2dcea9ccd9a")
                        },
                        new
                        {
                            Id = new Guid("66d1d6a6-a919-4b64-98e3-b4893b32562f"),
                            Title = "Гриби",
                            TypeId = new Guid("73e77e8f-7f1d-494f-8292-bb74082dcc30")
                        });
                });

            modelBuilder.Entity("RecipeBrowser.Core.Entities.ProductType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProductTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("86d72acc-54cd-4ba8-9fd9-e80dbc786569"),
                            Title = "Фрукти"
                        },
                        new
                        {
                            Id = new Guid("73e77e8f-7f1d-494f-8292-bb74082dcc30"),
                            Title = "Овочі"
                        },
                        new
                        {
                            Id = new Guid("b7c53f4f-6631-47cb-a893-e64bcd69be86"),
                            Title = "М'ясо"
                        },
                        new
                        {
                            Id = new Guid("dc1688ad-b521-4cec-9b07-1297e41187c4"),
                            Title = "Морепродукти"
                        },
                        new
                        {
                            Id = new Guid("e20526a2-c082-4e60-a9b6-7a70656baa85"),
                            Title = "Спеції"
                        },
                        new
                        {
                            Id = new Guid("81b63261-4744-4239-b4ab-c2dcea9ccd9a"),
                            Title = "Інше"
                        });
                });

            modelBuilder.Entity("RecipeBrowser.Core.Entities.Recipe", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CookDuration")
                        .HasColumnType("int");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DifficultyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("DifficultyId");

                    b.HasIndex("TypeId");

                    b.ToTable("Recipes");
                });

            modelBuilder.Entity("RecipeBrowser.Core.Entities.RecipeCollection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RecipesCollections");
                });

            modelBuilder.Entity("RecipeBrowser.Core.Entities.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<Guid>("RecipeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RecipeId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("RecipeBrowser.Core.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("bbef0523-79d8-43de-93ce-9d7fa17eab24"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7e2c524e-a2c8-4b1f-94ec-da30f2990dcb",
                            Email = "admin@recipes.daniil.page",
                            EmailConfirmed = true,
                            FullName = "Даниїл Максимчук",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@RECIPES.DANIIL.PAGE",
                            NormalizedUserName = "ADMIN@RECIPES.DANIIL.PAGE",
                            PasswordHash = "AQAAAAIAAYagAAAAEPT8FIPSZv22Eu2QFrUaB8X9Smo2JsvZk4FCCyvcWd3QQcJwCTvP8acfOG0gw62bTg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1ddf95f0-338d-4ed8-a9fc-ee47f61796fa",
                            TwoFactorEnabled = false,
                            UserName = "admin@recipes.daniil.page"
                        },
                        new
                        {
                            Id = new Guid("6835ee35-29a5-49e5-a415-d831d4d0527b"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ccd9aa50-1789-4124-8208-d986c352a206",
                            Email = "user@recipes.daniil.page",
                            EmailConfirmed = true,
                            FullName = "Ігор Куренко",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@RECIPES.DANIIL.PAGE",
                            NormalizedUserName = "USER@RECIPES.DANIIL.PAGE",
                            PasswordHash = "AQAAAAIAAYagAAAAEFhgxR0/sTX7/FTsLpu7JS/Y5MVZpgg1bEEDo5QusCKRVjkLi1rX34dN7Nw3pAhU0Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6859fbd9-ab2b-47ff-bcdb-a2f4edcba70e",
                            TwoFactorEnabled = false,
                            UserName = "user@recipes.daniil.page"
                        });
                });

            modelBuilder.Entity("RecipeRecipeCollection", b =>
                {
                    b.Property<Guid>("RecipeCollectionsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RecipesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RecipeCollectionsId", "RecipesId");

                    b.HasIndex("RecipesId");

                    b.ToTable("RecipeRecipeCollection");
                });

            modelBuilder.Entity("IngredientRecipe", b =>
                {
                    b.HasOne("RecipeBrowser.Core.Entities.Ingredient", null)
                        .WithMany()
                        .HasForeignKey("IngredientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RecipeBrowser.Core.Entities.Recipe", null)
                        .WithMany()
                        .HasForeignKey("RecipesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("RecipeBrowser.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("RecipeBrowser.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RecipeBrowser.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("RecipeBrowser.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RecipeBrowser.Core.Entities.Ingredient", b =>
                {
                    b.HasOne("RecipeBrowser.Core.Entities.Measure", "Measure")
                        .WithMany("Ingredients")
                        .HasForeignKey("MeasureId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RecipeBrowser.Core.Entities.Product", "Product")
                        .WithMany("Ingredients")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Measure");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("RecipeBrowser.Core.Entities.Product", b =>
                {
                    b.HasOne("RecipeBrowser.Core.Entities.ProductType", "Type")
                        .WithMany("Products")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Type");
                });

            modelBuilder.Entity("RecipeBrowser.Core.Entities.Recipe", b =>
                {
                    b.HasOne("RecipeBrowser.Core.Entities.User", "Creator")
                        .WithMany("Recipes")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RecipeBrowser.Core.Entities.CookingDifficulty", "Difficulty")
                        .WithMany("Recipes")
                        .HasForeignKey("DifficultyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RecipeBrowser.Core.Entities.CookingType", "Type")
                        .WithMany("Recipes")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Difficulty");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("RecipeBrowser.Core.Entities.RecipeCollection", b =>
                {
                    b.HasOne("RecipeBrowser.Core.Entities.User", "User")
                        .WithMany("RecipeCollecitons")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("RecipeBrowser.Core.Entities.Review", b =>
                {
                    b.HasOne("RecipeBrowser.Core.Entities.Recipe", "Recipe")
                        .WithMany("Reviews")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RecipeBrowser.Core.Entities.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recipe");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RecipeRecipeCollection", b =>
                {
                    b.HasOne("RecipeBrowser.Core.Entities.RecipeCollection", null)
                        .WithMany()
                        .HasForeignKey("RecipeCollectionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RecipeBrowser.Core.Entities.Recipe", null)
                        .WithMany()
                        .HasForeignKey("RecipesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RecipeBrowser.Core.Entities.CookingDifficulty", b =>
                {
                    b.Navigation("Recipes");
                });

            modelBuilder.Entity("RecipeBrowser.Core.Entities.CookingType", b =>
                {
                    b.Navigation("Recipes");
                });

            modelBuilder.Entity("RecipeBrowser.Core.Entities.Measure", b =>
                {
                    b.Navigation("Ingredients");
                });

            modelBuilder.Entity("RecipeBrowser.Core.Entities.Product", b =>
                {
                    b.Navigation("Ingredients");
                });

            modelBuilder.Entity("RecipeBrowser.Core.Entities.ProductType", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("RecipeBrowser.Core.Entities.Recipe", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("RecipeBrowser.Core.Entities.User", b =>
                {
                    b.Navigation("RecipeCollecitons");

                    b.Navigation("Recipes");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
