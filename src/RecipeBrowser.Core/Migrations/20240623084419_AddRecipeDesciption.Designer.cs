// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RecipeBrowser.Core.Context;

#nullable disable

namespace RecipeBrowser.Core.Migrations
{
    [DbContext(typeof(ProjectContext))]
    [Migration("20240623084419_AddRecipeDesciption")]
    partial class AddRecipeDesciption
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("IngredientRecipe", b =>
                {
                    b.Property<Guid>("IngredientsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RecipesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IngredientsId", "RecipesId");

                    b.HasIndex("RecipesId");

                    b.ToTable("IngredientRecipe");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("612c374c-eb70-4cba-a645-a6851c4a0917"),
                            ConcurrencyStamp = "612c374c-eb70-4cba-a645-a6851c4a0917",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("3c8fcf0a-cd7c-4f09-a874-4a06d05d2039"),
                            ConcurrencyStamp = "3c8fcf0a-cd7c-4f09-a874-4a06d05d2039",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("f5a6d4e1-91f8-4772-b4bb-285e37b1e4c2"),
                            RoleId = new Guid("612c374c-eb70-4cba-a645-a6851c4a0917")
                        },
                        new
                        {
                            UserId = new Guid("bd81a1a3-1c34-4d62-ae48-f2b579bb431e"),
                            RoleId = new Guid("3c8fcf0a-cd7c-4f09-a874-4a06d05d2039")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RecipeBrowser.Core.Entities.CookingDifficulty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CookingDifficulties");

                    b.HasData(
                        new
                        {
                            Id = new Guid("139c57c6-f916-4135-9b88-0d48b3cd5546"),
                            Title = "Легко"
                        },
                        new
                        {
                            Id = new Guid("8c2713f2-dd17-4a44-bdc3-54520a71b211"),
                            Title = "Нормально"
                        },
                        new
                        {
                            Id = new Guid("8fc02063-90a3-4efa-b0f2-52ecc07e3ff6"),
                            Title = "Важко"
                        });
                });

            modelBuilder.Entity("RecipeBrowser.Core.Entities.CookingType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CookingTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bf4b922f-e57f-4293-9b18-13bafcf43b1e"),
                            Title = "Стави в мікрохвильовці"
                        },
                        new
                        {
                            Id = new Guid("9b71d678-fdbd-4bac-9dc2-535aa76f47fb"),
                            Title = "Страви для грилю, барбекю, мангалу"
                        },
                        new
                        {
                            Id = new Guid("b8e95752-7ba9-4f76-97a6-30c9fed48044"),
                            Title = "Страви в мультиварці"
                        },
                        new
                        {
                            Id = new Guid("4ca4e8b7-dde9-4578-92ce-5d4fcfbf5126"),
                            Title = "Страви без спеціальних пристосувань"
                        },
                        new
                        {
                            Id = new Guid("b12561ad-463a-49e1-bcbc-8a96ff64d606"),
                            Title = "Страви на плиті"
                        },
                        new
                        {
                            Id = new Guid("869f4859-b52e-498a-b50a-e563cf872132"),
                            Title = "Страви в духовці"
                        },
                        new
                        {
                            Id = new Guid("b4052217-0448-4609-9dd5-39bc8661ec5a"),
                            Title = "Страви в пароварці"
                        });
                });

            modelBuilder.Entity("RecipeBrowser.Core.Entities.Ingredient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Amount")
                        .HasColumnType("real");

                    b.Property<Guid>("MeasureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MeasureId");

                    b.HasIndex("ProductId");

                    b.ToTable("Ingredients");
                });

            modelBuilder.Entity("RecipeBrowser.Core.Entities.Measure", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Measures");

                    b.HasData(
                        new
                        {
                            Id = new Guid("92c5af6f-3e7a-43cd-9719-2b7448a20795"),
                            Title = "гр."
                        },
                        new
                        {
                            Id = new Guid("a8ed4626-9e39-4511-b583-8dd832045139"),
                            Title = "кг."
                        },
                        new
                        {
                            Id = new Guid("69bd25bc-2e49-41f4-962d-6ba64c3f8ba2"),
                            Title = "л."
                        },
                        new
                        {
                            Id = new Guid("604b3799-3eef-4299-b9e6-9a87e5d6222a"),
                            Title = "мл."
                        },
                        new
                        {
                            Id = new Guid("d0e8e411-e65e-4cf0-914d-1626a008692a"),
                            Title = "стол. л."
                        },
                        new
                        {
                            Id = new Guid("c5a39571-7d08-46b3-9e3e-4ef9b5bf43a3"),
                            Title = "чай. л."
                        },
                        new
                        {
                            Id = new Guid("abed8a9e-121c-41aa-ae37-157d86e54296"),
                            Title = "штуки"
                        });
                });

            modelBuilder.Entity("RecipeBrowser.Core.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a3a2bdf4-2bbf-4f36-b73a-6539bf300cc9"),
                            Title = "Яблуко",
                            TypeId = new Guid("925a1826-f862-44c6-96db-e91a545fc477")
                        },
                        new
                        {
                            Id = new Guid("4cb42f80-a88a-48f2-9ac2-5bbe1bf5e9af"),
                            Title = "Банан",
                            TypeId = new Guid("925a1826-f862-44c6-96db-e91a545fc477")
                        },
                        new
                        {
                            Id = new Guid("70c5a4dd-7c91-421c-b225-e882f56512ef"),
                            Title = "Апельсин",
                            TypeId = new Guid("925a1826-f862-44c6-96db-e91a545fc477")
                        },
                        new
                        {
                            Id = new Guid("4da45bd4-2621-4fc2-965d-921ed9d13de4"),
                            Title = "Помідор",
                            TypeId = new Guid("d37dee6d-d272-43a6-8c36-ef9a13b99c8a")
                        },
                        new
                        {
                            Id = new Guid("3062fa33-88a1-4380-963d-5b6fd9a35e5d"),
                            Title = "Морква",
                            TypeId = new Guid("d37dee6d-d272-43a6-8c36-ef9a13b99c8a")
                        },
                        new
                        {
                            Id = new Guid("409afb1e-043f-47a2-80a0-169882394daa"),
                            Title = "Картопля",
                            TypeId = new Guid("d37dee6d-d272-43a6-8c36-ef9a13b99c8a")
                        },
                        new
                        {
                            Id = new Guid("17ce5cee-cdb7-4690-b293-5f89fc84c5ef"),
                            Title = "Куряча грудка",
                            TypeId = new Guid("8887c26a-221e-483f-9903-e64a0674b04f")
                        },
                        new
                        {
                            Id = new Guid("dcd19a23-6aa6-4b66-8fa7-dad4c20e7d65"),
                            Title = "Свинина",
                            TypeId = new Guid("8887c26a-221e-483f-9903-e64a0674b04f")
                        },
                        new
                        {
                            Id = new Guid("67d5a57a-572e-431c-a8a2-2aaa9e7430de"),
                            Title = "Яловичина",
                            TypeId = new Guid("8887c26a-221e-483f-9903-e64a0674b04f")
                        },
                        new
                        {
                            Id = new Guid("918c40dd-b565-4d4c-b923-6629a66c5ef1"),
                            Title = "Філе лосося",
                            TypeId = new Guid("d9983e69-d9d1-47f3-8dce-a87786f13f8d")
                        },
                        new
                        {
                            Id = new Guid("9c371cf7-161c-4381-a83e-34254cc6e810"),
                            Title = "Креветки",
                            TypeId = new Guid("d9983e69-d9d1-47f3-8dce-a87786f13f8d")
                        },
                        new
                        {
                            Id = new Guid("82f02e2a-0cf7-4045-9067-64f88932dce3"),
                            Title = "Тунець",
                            TypeId = new Guid("d9983e69-d9d1-47f3-8dce-a87786f13f8d")
                        },
                        new
                        {
                            Id = new Guid("d9a4f531-bad8-4045-beb5-dfa629d10b37"),
                            Title = "Сіль",
                            TypeId = new Guid("cd046d14-dc80-4fcb-bdf9-a1c0dd6b4ebb")
                        },
                        new
                        {
                            Id = new Guid("18acd06c-d723-4060-9e28-b080cca3715c"),
                            Title = "Чорний перець",
                            TypeId = new Guid("cd046d14-dc80-4fcb-bdf9-a1c0dd6b4ebb")
                        },
                        new
                        {
                            Id = new Guid("6fdb469b-4484-40d2-b354-ce6aa8901443"),
                            Title = "Паприка",
                            TypeId = new Guid("cd046d14-dc80-4fcb-bdf9-a1c0dd6b4ebb")
                        },
                        new
                        {
                            Id = new Guid("bf54daa1-0ef5-455d-bca1-c71e4e5d39ba"),
                            Title = "Оливкова олія",
                            TypeId = new Guid("8af325f3-5040-40eb-a0bc-9ce157e588c1")
                        },
                        new
                        {
                            Id = new Guid("2344e418-8530-41e2-9940-344e093ebdf8"),
                            Title = "Масло",
                            TypeId = new Guid("8af325f3-5040-40eb-a0bc-9ce157e588c1")
                        },
                        new
                        {
                            Id = new Guid("beffe174-6a24-443e-86f1-c956bab35781"),
                            Title = "Молоко",
                            TypeId = new Guid("8af325f3-5040-40eb-a0bc-9ce157e588c1")
                        },
                        new
                        {
                            Id = new Guid("37ae8938-836e-41d6-a4c0-a23a251c9ca2"),
                            Title = "Яйця",
                            TypeId = new Guid("8af325f3-5040-40eb-a0bc-9ce157e588c1")
                        },
                        new
                        {
                            Id = new Guid("2a0c4c52-5635-4386-8e31-efb8532542d7"),
                            Title = "Борошно",
                            TypeId = new Guid("8af325f3-5040-40eb-a0bc-9ce157e588c1")
                        },
                        new
                        {
                            Id = new Guid("0019c4c7-299f-4f0a-b3c7-01fce6af80e7"),
                            Title = "Цибуля",
                            TypeId = new Guid("d37dee6d-d272-43a6-8c36-ef9a13b99c8a")
                        },
                        new
                        {
                            Id = new Guid("7a8efa5a-85b5-43a5-8cae-4ba781e0ba17"),
                            Title = "Часник",
                            TypeId = new Guid("d37dee6d-d272-43a6-8c36-ef9a13b99c8a")
                        },
                        new
                        {
                            Id = new Guid("f642e718-5271-4827-87cc-8bb66be28b51"),
                            Title = "Огірок",
                            TypeId = new Guid("d37dee6d-d272-43a6-8c36-ef9a13b99c8a")
                        },
                        new
                        {
                            Id = new Guid("6330991a-bd8c-4d7a-b825-6922984ca83d"),
                            Title = "Сир",
                            TypeId = new Guid("8af325f3-5040-40eb-a0bc-9ce157e588c1")
                        },
                        new
                        {
                            Id = new Guid("4073af8d-5d36-4484-9310-b44a5415e99e"),
                            Title = "Хліб",
                            TypeId = new Guid("8af325f3-5040-40eb-a0bc-9ce157e588c1")
                        },
                        new
                        {
                            Id = new Guid("e4eb93d9-d5b2-4342-b89c-6e0b03504298"),
                            Title = "Цукор",
                            TypeId = new Guid("8af325f3-5040-40eb-a0bc-9ce157e588c1")
                        },
                        new
                        {
                            Id = new Guid("24116bee-3aba-47e5-95d1-b5bddd0d03c6"),
                            Title = "Бекон",
                            TypeId = new Guid("8887c26a-221e-483f-9903-e64a0674b04f")
                        },
                        new
                        {
                            Id = new Guid("0b582b74-c04c-4137-839f-1ab3ba959434"),
                            Title = "Сметана",
                            TypeId = new Guid("8af325f3-5040-40eb-a0bc-9ce157e588c1")
                        },
                        new
                        {
                            Id = new Guid("eab25ceb-dea3-4c37-891b-c08db733023a"),
                            Title = "Гриби",
                            TypeId = new Guid("d37dee6d-d272-43a6-8c36-ef9a13b99c8a")
                        });
                });

            modelBuilder.Entity("RecipeBrowser.Core.Entities.ProductType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProductTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("925a1826-f862-44c6-96db-e91a545fc477"),
                            Title = "Фрукти"
                        },
                        new
                        {
                            Id = new Guid("d37dee6d-d272-43a6-8c36-ef9a13b99c8a"),
                            Title = "Овочі"
                        },
                        new
                        {
                            Id = new Guid("8887c26a-221e-483f-9903-e64a0674b04f"),
                            Title = "М'ясо"
                        },
                        new
                        {
                            Id = new Guid("d9983e69-d9d1-47f3-8dce-a87786f13f8d"),
                            Title = "Морепродукти"
                        },
                        new
                        {
                            Id = new Guid("cd046d14-dc80-4fcb-bdf9-a1c0dd6b4ebb"),
                            Title = "Спеції"
                        },
                        new
                        {
                            Id = new Guid("8af325f3-5040-40eb-a0bc-9ce157e588c1"),
                            Title = "Інше"
                        });
                });

            modelBuilder.Entity("RecipeBrowser.Core.Entities.Recipe", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CookDuration")
                        .HasColumnType("int");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DifficultyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("DifficultyId");

                    b.HasIndex("TypeId");

                    b.ToTable("Recipes");
                });

            modelBuilder.Entity("RecipeBrowser.Core.Entities.RecipeCollection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RecipesCollections");
                });

            modelBuilder.Entity("RecipeBrowser.Core.Entities.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<Guid>("RecipeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RecipeId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("RecipeBrowser.Core.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("f5a6d4e1-91f8-4772-b4bb-285e37b1e4c2"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3f46ad96-9838-4318-b27f-d87674b8d15a",
                            Email = "admin@recipes.daniil.page",
                            EmailConfirmed = true,
                            FullName = "Даниїл Максимчук",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@RECIPES.DANIIL.PAGE",
                            NormalizedUserName = "ADMIN@RECIPES.DANIIL.PAGE",
                            PasswordHash = "AQAAAAIAAYagAAAAENX4e9olo/ZzT57RTqbZL+l/1nXToueCOg8HL20NgiWsX7MB8+lk2y3/fljwBdXLiA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "94a1fdf0-9d75-4792-8a88-a59beee967ac",
                            TwoFactorEnabled = false,
                            UserName = "admin@recipes.daniil.page"
                        },
                        new
                        {
                            Id = new Guid("bd81a1a3-1c34-4d62-ae48-f2b579bb431e"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "19156a53-201f-455b-be6a-086b0f469a55",
                            Email = "user@recipes.daniil.page",
                            EmailConfirmed = true,
                            FullName = "Ігор Куренко",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@RECIPES.DANIIL.PAGE",
                            NormalizedUserName = "USER@RECIPES.DANIIL.PAGE",
                            PasswordHash = "AQAAAAIAAYagAAAAEMX3bgPcFLSv77YTnXgEJs02DYBaKhykPyCvCJclwNM6dVLcQDNCdy/yqbF1EcFCbg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "048660f9-014f-47ef-b0ea-3a8366f34630",
                            TwoFactorEnabled = false,
                            UserName = "user@recipes.daniil.page"
                        });
                });

            modelBuilder.Entity("RecipeRecipeCollection", b =>
                {
                    b.Property<Guid>("RecipeCollectionsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RecipesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RecipeCollectionsId", "RecipesId");

                    b.HasIndex("RecipesId");

                    b.ToTable("RecipeRecipeCollection");
                });

            modelBuilder.Entity("IngredientRecipe", b =>
                {
                    b.HasOne("RecipeBrowser.Core.Entities.Ingredient", null)
                        .WithMany()
                        .HasForeignKey("IngredientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RecipeBrowser.Core.Entities.Recipe", null)
                        .WithMany()
                        .HasForeignKey("RecipesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("RecipeBrowser.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("RecipeBrowser.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RecipeBrowser.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("RecipeBrowser.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RecipeBrowser.Core.Entities.Ingredient", b =>
                {
                    b.HasOne("RecipeBrowser.Core.Entities.Measure", "Measure")
                        .WithMany("Ingredients")
                        .HasForeignKey("MeasureId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RecipeBrowser.Core.Entities.Product", "Product")
                        .WithMany("Ingredients")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Measure");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("RecipeBrowser.Core.Entities.Product", b =>
                {
                    b.HasOne("RecipeBrowser.Core.Entities.ProductType", "Type")
                        .WithMany("Products")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Type");
                });

            modelBuilder.Entity("RecipeBrowser.Core.Entities.Recipe", b =>
                {
                    b.HasOne("RecipeBrowser.Core.Entities.User", "Creator")
                        .WithMany("Recipes")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RecipeBrowser.Core.Entities.CookingDifficulty", "Difficulty")
                        .WithMany("Recipes")
                        .HasForeignKey("DifficultyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RecipeBrowser.Core.Entities.CookingType", "Type")
                        .WithMany("Recipes")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Difficulty");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("RecipeBrowser.Core.Entities.RecipeCollection", b =>
                {
                    b.HasOne("RecipeBrowser.Core.Entities.User", "User")
                        .WithMany("RecipeCollecitons")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("RecipeBrowser.Core.Entities.Review", b =>
                {
                    b.HasOne("RecipeBrowser.Core.Entities.Recipe", "Recipe")
                        .WithMany("Reviews")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RecipeBrowser.Core.Entities.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recipe");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RecipeRecipeCollection", b =>
                {
                    b.HasOne("RecipeBrowser.Core.Entities.RecipeCollection", null)
                        .WithMany()
                        .HasForeignKey("RecipeCollectionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RecipeBrowser.Core.Entities.Recipe", null)
                        .WithMany()
                        .HasForeignKey("RecipesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RecipeBrowser.Core.Entities.CookingDifficulty", b =>
                {
                    b.Navigation("Recipes");
                });

            modelBuilder.Entity("RecipeBrowser.Core.Entities.CookingType", b =>
                {
                    b.Navigation("Recipes");
                });

            modelBuilder.Entity("RecipeBrowser.Core.Entities.Measure", b =>
                {
                    b.Navigation("Ingredients");
                });

            modelBuilder.Entity("RecipeBrowser.Core.Entities.Product", b =>
                {
                    b.Navigation("Ingredients");
                });

            modelBuilder.Entity("RecipeBrowser.Core.Entities.ProductType", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("RecipeBrowser.Core.Entities.Recipe", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("RecipeBrowser.Core.Entities.User", b =>
                {
                    b.Navigation("RecipeCollecitons");

                    b.Navigation("Recipes");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
