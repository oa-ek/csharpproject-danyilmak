// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RecipeBrowser.Core.Context;

#nullable disable

namespace RecipeBrowser.Core.Migrations
{
    [DbContext(typeof(ProjectContext))]
    [Migration("20240622185023_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("IngredientRecipe", b =>
                {
                    b.Property<Guid>("IngredientsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RecipesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IngredientsId", "RecipesId");

                    b.HasIndex("RecipesId");

                    b.ToTable("IngredientRecipe");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("a2cbf6bf-a2d4-4ff3-8675-e4a0824de58c"),
                            ConcurrencyStamp = "a2cbf6bf-a2d4-4ff3-8675-e4a0824de58c",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("19ff4917-4965-4bf7-9928-f191d90312ef"),
                            ConcurrencyStamp = "19ff4917-4965-4bf7-9928-f191d90312ef",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("4eb1e8b4-2338-4ede-8a2f-c68f4c8446e0"),
                            RoleId = new Guid("a2cbf6bf-a2d4-4ff3-8675-e4a0824de58c")
                        },
                        new
                        {
                            UserId = new Guid("f9d6e91e-9f29-469f-8b33-b76cbd5a58dd"),
                            RoleId = new Guid("19ff4917-4965-4bf7-9928-f191d90312ef")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RecipeBrowser.Core.Entities.CookingDifficulty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CookingDifficulties");

                    b.HasData(
                        new
                        {
                            Id = new Guid("39ebc702-d2c9-4891-8091-b1bc9fc077d5"),
                            Title = "Легко"
                        },
                        new
                        {
                            Id = new Guid("a281e0da-85fe-487e-9038-bf6eb9452a41"),
                            Title = "Нормально"
                        },
                        new
                        {
                            Id = new Guid("e185f352-1858-40d5-80a4-d3aa2a370e9d"),
                            Title = "Важко"
                        });
                });

            modelBuilder.Entity("RecipeBrowser.Core.Entities.CookingType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CookingTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8272f94d-11b4-4989-afea-7a59bf381fd6"),
                            Title = "Стави в мікрохвильовці"
                        },
                        new
                        {
                            Id = new Guid("cb29269d-2e84-4d80-846d-1e7a349a14b9"),
                            Title = "Страви для грилю, барбекю, мангалу"
                        },
                        new
                        {
                            Id = new Guid("5637f96d-e698-4e14-9082-e79456cf0b08"),
                            Title = "Страви в мультиварці"
                        },
                        new
                        {
                            Id = new Guid("da95aa37-1151-4230-b6f1-a248059fc29e"),
                            Title = "Страви без спеціальних пристосувань"
                        },
                        new
                        {
                            Id = new Guid("6e6f391d-fe51-4b7b-97d9-09c04fcff2ef"),
                            Title = "Страви на плиті"
                        },
                        new
                        {
                            Id = new Guid("6f4b8ddc-5151-4d2a-8a94-4f9a577faa4f"),
                            Title = "Страви в духовці"
                        },
                        new
                        {
                            Id = new Guid("b7267971-7380-477f-b66a-3c3ee020736b"),
                            Title = "Страви в пароварці"
                        });
                });

            modelBuilder.Entity("RecipeBrowser.Core.Entities.Ingredient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Amount")
                        .HasColumnType("real");

                    b.Property<Guid>("MeasureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MeasureId");

                    b.HasIndex("ProductId");

                    b.ToTable("Ingredients");
                });

            modelBuilder.Entity("RecipeBrowser.Core.Entities.Measure", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Measures");

                    b.HasData(
                        new
                        {
                            Id = new Guid("472f3f67-13f9-459c-a0b7-58fda0ebd880"),
                            Title = "гр."
                        },
                        new
                        {
                            Id = new Guid("46fe0cbb-25b0-4b4c-aaaf-7d8b72feff86"),
                            Title = "кг."
                        },
                        new
                        {
                            Id = new Guid("59adbbec-05cc-491e-9e7d-4e72c550cf3b"),
                            Title = "л."
                        },
                        new
                        {
                            Id = new Guid("b4d40926-f149-4d45-82a2-c4a7b96aefec"),
                            Title = "мл."
                        },
                        new
                        {
                            Id = new Guid("b2a3d627-01ce-488f-8a32-ce0b81216734"),
                            Title = "стол. л."
                        },
                        new
                        {
                            Id = new Guid("be5f4627-dad5-43cb-8250-11a4f71c10a3"),
                            Title = "чай. л."
                        },
                        new
                        {
                            Id = new Guid("75d31e01-b7f8-437a-b05e-3cd6d877f40a"),
                            Title = "штуки"
                        });
                });

            modelBuilder.Entity("RecipeBrowser.Core.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("dc0a2c15-32e5-4e5d-9c05-905226dc5e1e"),
                            Title = "Яблуко",
                            TypeId = new Guid("a0042c07-dc00-4ae3-960a-d6a77eb71d71")
                        },
                        new
                        {
                            Id = new Guid("54085a94-3f0b-41b8-9341-4603e144b236"),
                            Title = "Банан",
                            TypeId = new Guid("a0042c07-dc00-4ae3-960a-d6a77eb71d71")
                        },
                        new
                        {
                            Id = new Guid("d8585cf2-4666-45b2-9147-9eff953c3d65"),
                            Title = "Апельсин",
                            TypeId = new Guid("a0042c07-dc00-4ae3-960a-d6a77eb71d71")
                        },
                        new
                        {
                            Id = new Guid("45a9a187-9956-4212-9a3a-5b1312075378"),
                            Title = "Помідор",
                            TypeId = new Guid("3f947467-e012-4c89-b16f-e3d7c0e7d1f2")
                        },
                        new
                        {
                            Id = new Guid("72e7db96-063f-44d5-a893-c6ac5210b000"),
                            Title = "Морква",
                            TypeId = new Guid("3f947467-e012-4c89-b16f-e3d7c0e7d1f2")
                        },
                        new
                        {
                            Id = new Guid("fc9597f1-2dc7-47b9-8419-7bbef6182380"),
                            Title = "Картопля",
                            TypeId = new Guid("3f947467-e012-4c89-b16f-e3d7c0e7d1f2")
                        },
                        new
                        {
                            Id = new Guid("b31e448e-41db-4ab6-912c-9685fdeee279"),
                            Title = "Куряча грудка",
                            TypeId = new Guid("e9339016-3639-44d8-b2d4-6adcc5c177b5")
                        },
                        new
                        {
                            Id = new Guid("58b0cdc8-cad6-40d9-857a-9a8a51b5dff3"),
                            Title = "Свинина",
                            TypeId = new Guid("e9339016-3639-44d8-b2d4-6adcc5c177b5")
                        },
                        new
                        {
                            Id = new Guid("3470c711-befd-4791-a60d-675416faf0d5"),
                            Title = "Яловичина",
                            TypeId = new Guid("e9339016-3639-44d8-b2d4-6adcc5c177b5")
                        },
                        new
                        {
                            Id = new Guid("634a0747-c87b-41fa-a663-815840d7a859"),
                            Title = "Філе лосося",
                            TypeId = new Guid("53b62db2-48ca-4610-b4c5-72e1751e05c3")
                        },
                        new
                        {
                            Id = new Guid("bc3354d8-0e4c-450d-b7d1-37ddd5a2772b"),
                            Title = "Креветки",
                            TypeId = new Guid("53b62db2-48ca-4610-b4c5-72e1751e05c3")
                        },
                        new
                        {
                            Id = new Guid("c20c7b03-fe0f-4d4f-bef4-377aa758d429"),
                            Title = "Тунець",
                            TypeId = new Guid("53b62db2-48ca-4610-b4c5-72e1751e05c3")
                        },
                        new
                        {
                            Id = new Guid("b577d403-235a-41be-a257-9a671a4c6f92"),
                            Title = "Сіль",
                            TypeId = new Guid("e430f677-4599-4072-92b5-0da47d960ddf")
                        },
                        new
                        {
                            Id = new Guid("b392b8be-3cb3-4ebe-b726-0c08a0f9433f"),
                            Title = "Чорний перець",
                            TypeId = new Guid("e430f677-4599-4072-92b5-0da47d960ddf")
                        },
                        new
                        {
                            Id = new Guid("0ca06b98-7e33-41f6-907d-6e26b58e6510"),
                            Title = "Паприка",
                            TypeId = new Guid("e430f677-4599-4072-92b5-0da47d960ddf")
                        },
                        new
                        {
                            Id = new Guid("eff9fa2f-d3f3-48d6-8226-c134795d6a9a"),
                            Title = "Оливкова олія",
                            TypeId = new Guid("e26ae6d9-8883-4edd-abde-7ec1adae58fe")
                        },
                        new
                        {
                            Id = new Guid("aa631eb5-7245-48e6-85b5-a8ffdb0c246f"),
                            Title = "Масло",
                            TypeId = new Guid("e26ae6d9-8883-4edd-abde-7ec1adae58fe")
                        },
                        new
                        {
                            Id = new Guid("c4ae9c39-1802-4514-85c8-1acc9aab62ae"),
                            Title = "Молоко",
                            TypeId = new Guid("e26ae6d9-8883-4edd-abde-7ec1adae58fe")
                        },
                        new
                        {
                            Id = new Guid("b94d438f-97bf-4232-a9b0-336187ce0c28"),
                            Title = "Яйця",
                            TypeId = new Guid("e26ae6d9-8883-4edd-abde-7ec1adae58fe")
                        },
                        new
                        {
                            Id = new Guid("1b3ee351-e451-4c6e-a58b-cea36bc05f4c"),
                            Title = "Борошно",
                            TypeId = new Guid("e26ae6d9-8883-4edd-abde-7ec1adae58fe")
                        },
                        new
                        {
                            Id = new Guid("419b52ce-81f6-49b3-b584-59483c2d40b8"),
                            Title = "Цибуля",
                            TypeId = new Guid("3f947467-e012-4c89-b16f-e3d7c0e7d1f2")
                        },
                        new
                        {
                            Id = new Guid("9b0c4795-6f93-4f21-8159-19d303aa2a76"),
                            Title = "Часник",
                            TypeId = new Guid("3f947467-e012-4c89-b16f-e3d7c0e7d1f2")
                        },
                        new
                        {
                            Id = new Guid("60d8a783-c6fe-4c0e-aa48-4f115cb751f0"),
                            Title = "Огірок",
                            TypeId = new Guid("3f947467-e012-4c89-b16f-e3d7c0e7d1f2")
                        },
                        new
                        {
                            Id = new Guid("2c0b2a08-77d6-4d39-9be7-b5cd782314e2"),
                            Title = "Сир",
                            TypeId = new Guid("e26ae6d9-8883-4edd-abde-7ec1adae58fe")
                        },
                        new
                        {
                            Id = new Guid("e553faf1-3587-4893-a929-d063ba4b58c7"),
                            Title = "Хліб",
                            TypeId = new Guid("e26ae6d9-8883-4edd-abde-7ec1adae58fe")
                        },
                        new
                        {
                            Id = new Guid("7c0d62d5-47f4-44d6-b030-baf73e04120a"),
                            Title = "Цукор",
                            TypeId = new Guid("e26ae6d9-8883-4edd-abde-7ec1adae58fe")
                        },
                        new
                        {
                            Id = new Guid("c91eec73-4c50-4173-9501-1b1f5f5c9b36"),
                            Title = "Бекон",
                            TypeId = new Guid("e9339016-3639-44d8-b2d4-6adcc5c177b5")
                        },
                        new
                        {
                            Id = new Guid("f1464541-9b0a-4403-82b5-bf21db9933fc"),
                            Title = "Сметана",
                            TypeId = new Guid("e26ae6d9-8883-4edd-abde-7ec1adae58fe")
                        },
                        new
                        {
                            Id = new Guid("7905eb78-bbb5-4a69-bbce-a6b9a7748f76"),
                            Title = "Гриби",
                            TypeId = new Guid("3f947467-e012-4c89-b16f-e3d7c0e7d1f2")
                        });
                });

            modelBuilder.Entity("RecipeBrowser.Core.Entities.ProductType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProductTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a0042c07-dc00-4ae3-960a-d6a77eb71d71"),
                            Title = "Фрукти"
                        },
                        new
                        {
                            Id = new Guid("3f947467-e012-4c89-b16f-e3d7c0e7d1f2"),
                            Title = "Овочі"
                        },
                        new
                        {
                            Id = new Guid("e9339016-3639-44d8-b2d4-6adcc5c177b5"),
                            Title = "М'ясо"
                        },
                        new
                        {
                            Id = new Guid("53b62db2-48ca-4610-b4c5-72e1751e05c3"),
                            Title = "Морепродукти"
                        },
                        new
                        {
                            Id = new Guid("e430f677-4599-4072-92b5-0da47d960ddf"),
                            Title = "Спеції"
                        },
                        new
                        {
                            Id = new Guid("e26ae6d9-8883-4edd-abde-7ec1adae58fe"),
                            Title = "Інше"
                        });
                });

            modelBuilder.Entity("RecipeBrowser.Core.Entities.Recipe", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CookDuration")
                        .HasColumnType("int");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DifficultyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("DifficultyId");

                    b.HasIndex("TypeId");

                    b.ToTable("Recipes");
                });

            modelBuilder.Entity("RecipeBrowser.Core.Entities.RecipeCollection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RecipesCollections");
                });

            modelBuilder.Entity("RecipeBrowser.Core.Entities.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<Guid>("RecipeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RecipeId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("RecipeBrowser.Core.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("4eb1e8b4-2338-4ede-8a2f-c68f4c8446e0"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5028db07-7946-41c7-a139-2bc3e04fcfbd",
                            Email = "admin@recipes.daniil.page",
                            EmailConfirmed = true,
                            FullName = "Даниїл Максимчук",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@RECIPES.DANIIL.PAGE",
                            NormalizedUserName = "ADMIN@RECIPES.DANIIL.PAGE",
                            PasswordHash = "AQAAAAIAAYagAAAAEDjN9+eH8s+ZjmoXQp3qkXyBN6YbH2yS3nVO738H7D6eHEtZTKQVjhlYpAaap2caeQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "687f7167-55c2-467d-9d6a-2f0845bc46e0",
                            TwoFactorEnabled = false,
                            UserName = "admin@recipes.daniil.page"
                        },
                        new
                        {
                            Id = new Guid("f9d6e91e-9f29-469f-8b33-b76cbd5a58dd"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "68094007-3364-4cfe-96a2-0be9da0e4534",
                            Email = "user@recipes.daniil.page",
                            EmailConfirmed = true,
                            FullName = "Ігор Куренко",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@RECIPES.DANIIL.PAGE",
                            NormalizedUserName = "USER@RECIPES.DANIIL.PAGE",
                            PasswordHash = "AQAAAAIAAYagAAAAEJYCHH5J11tg+vc9Ei5aGojFFFzvVsxk4U99gjw2RED0Dk53rGZaK1knDuCnxK+/IA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1c9fa65c-08b2-4625-b0c4-1b0b47260338",
                            TwoFactorEnabled = false,
                            UserName = "user@recipes.daniil.page"
                        });
                });

            modelBuilder.Entity("RecipeRecipeCollection", b =>
                {
                    b.Property<Guid>("RecipeCollectionsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RecipesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RecipeCollectionsId", "RecipesId");

                    b.HasIndex("RecipesId");

                    b.ToTable("RecipeRecipeCollection");
                });

            modelBuilder.Entity("IngredientRecipe", b =>
                {
                    b.HasOne("RecipeBrowser.Core.Entities.Ingredient", null)
                        .WithMany()
                        .HasForeignKey("IngredientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RecipeBrowser.Core.Entities.Recipe", null)
                        .WithMany()
                        .HasForeignKey("RecipesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("RecipeBrowser.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("RecipeBrowser.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RecipeBrowser.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("RecipeBrowser.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RecipeBrowser.Core.Entities.Ingredient", b =>
                {
                    b.HasOne("RecipeBrowser.Core.Entities.Measure", "Measure")
                        .WithMany("Ingredients")
                        .HasForeignKey("MeasureId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RecipeBrowser.Core.Entities.Product", "Product")
                        .WithMany("Ingredients")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Measure");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("RecipeBrowser.Core.Entities.Product", b =>
                {
                    b.HasOne("RecipeBrowser.Core.Entities.ProductType", "Type")
                        .WithMany("Products")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Type");
                });

            modelBuilder.Entity("RecipeBrowser.Core.Entities.Recipe", b =>
                {
                    b.HasOne("RecipeBrowser.Core.Entities.User", "Creator")
                        .WithMany("Recipes")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RecipeBrowser.Core.Entities.CookingDifficulty", "Difficulty")
                        .WithMany("Recipes")
                        .HasForeignKey("DifficultyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RecipeBrowser.Core.Entities.CookingType", "Type")
                        .WithMany("Recipes")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Difficulty");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("RecipeBrowser.Core.Entities.RecipeCollection", b =>
                {
                    b.HasOne("RecipeBrowser.Core.Entities.User", "User")
                        .WithMany("RecipeCollecitons")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("RecipeBrowser.Core.Entities.Review", b =>
                {
                    b.HasOne("RecipeBrowser.Core.Entities.Recipe", "Recipe")
                        .WithMany("Reviews")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RecipeBrowser.Core.Entities.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recipe");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RecipeRecipeCollection", b =>
                {
                    b.HasOne("RecipeBrowser.Core.Entities.RecipeCollection", null)
                        .WithMany()
                        .HasForeignKey("RecipeCollectionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RecipeBrowser.Core.Entities.Recipe", null)
                        .WithMany()
                        .HasForeignKey("RecipesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RecipeBrowser.Core.Entities.CookingDifficulty", b =>
                {
                    b.Navigation("Recipes");
                });

            modelBuilder.Entity("RecipeBrowser.Core.Entities.CookingType", b =>
                {
                    b.Navigation("Recipes");
                });

            modelBuilder.Entity("RecipeBrowser.Core.Entities.Measure", b =>
                {
                    b.Navigation("Ingredients");
                });

            modelBuilder.Entity("RecipeBrowser.Core.Entities.Product", b =>
                {
                    b.Navigation("Ingredients");
                });

            modelBuilder.Entity("RecipeBrowser.Core.Entities.ProductType", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("RecipeBrowser.Core.Entities.Recipe", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("RecipeBrowser.Core.Entities.User", b =>
                {
                    b.Navigation("RecipeCollecitons");

                    b.Navigation("Recipes");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
